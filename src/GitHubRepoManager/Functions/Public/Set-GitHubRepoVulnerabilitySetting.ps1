<#
.SYNOPSIS
    A PowerShell function for enabling vulnerability alerts and automated security fixes
.DESCRIPTION
    A PowerShell function for enabling vulnerability alerts and automated security fixes
.PARAMETER GitHubOrg
    The name of the GitHub organisation
.PARAMETER RepoPrefix
    A prefix of the repos to apply enable vulnerability settings
.PARAMETER ExcludedRepoPrefix
    A prefix of the repos to exclude applying enable vulnerability settings
.EXAMPLE
    Set-GitHubSessionInformation -PatToken <not-a-real-pat-token>
    Set-GitHubAutomatedSecurityFixes -GitHubOrg MyGitHubOrg -RepoPrefix My- -ExcludedRepoPrefix My-Excluded-
.NOTES
    Uses:
    https://docs.github.com/en/rest/reference/repos#enable-vulnerability-alerts
    https://docs.github.com/en/rest/reference/repos#enable-automated-security-fixes
    Vulnerability alerts must be enabled before enabling automated security fixes
#>
function Set-GitHubRepoVulnerabilitySetting {
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSReviewUnusedParameter", "RepoSearchString", Justification = "False positive as rule does not know that Where-Object operates within the same scope")]
    [CmdletBinding(SupportsShouldProcess)]
    Param (
        [Parameter(Mandatory = $true)]
        [String]$GitHubOrg,
        [Parameter(Mandatory = $true)]
        [String]$RepoPrefix,
        [Parameter(Mandatory = $false)]
        [String]$ExcludedRepoPrefix
    )

    $Repos = Get-GitHubRepo -GitHubOrg $GitHubOrg | Where-Object { $_.name -match "^$RepoPrefix.+" -and $_.isArchived -eq $false }
    Write-Verbose -Message "Got $($Repos.Length) repositories"

    if ($ExcludedRepoPrefix) {
        $Repos = $Repos | Where-Object { $_.name -notmatch "^$ExcludedRepoPrefix.+" }
        Write-Verbose -Message "With excluded repository prefix, got $($Repos.Length) repositories"
    }

    if (!$Repos) {
        Write-Host "No unarchived repositories found in org $GitHubOrg that match prefix $RepoPrefix"
        if ($ExcludedRepoPrefix) {
            Write-Host "with excluded prefix $ExcludedRepoPrefix"
        }
    }
    else {
        Write-Host "Unarchived repositories found in org $GitHubOrg that match prefix $RepoPrefix"
        if ($ExcludedRepoPrefix) {
            Write-Host "with excluded prefix $ExcludedRepoPrefix"
        }
        $EnableSecretScanningBodyParams = @{
            security_and_analysis = @{
                secret_scanning = @{
                    status = "enabled"
                }
            }
        }
        $EnableSecretScanningBodyParamsJson = $EnableSecretScanningBodyParams | ConvertTo-Json
        foreach ($Repo in $Repos) {
            $Uri = "/repos/$GitHubOrg/$($Repo.name)/vulnerability-alerts"
            if ($PSCmdlet.ShouldProcess($Repo.name)) {
                Write-Host "Enabling vulnerability alerts for $($Repo.name)"
                Invoke-GitHubRestMethod -Method PUT -Uri $Uri
            }
            $Uri = "/repos/$GitHubOrg/$($Repo.name)/automated-security-fixes"
            if ($PSCmdlet.ShouldProcess($Repo.name)) {
                Write-Host "Enabling automated security fixes for $($Repo.name)"
                Invoke-GitHubRestMethod -Method PUT -Uri $Uri
            }
            $Uri = "/repos/$GitHubOrg/$($Repo.name)"
            if ($PSCmdlet.ShouldProcess($Repo.name) -and !$Repo.isPrivate) {
                Write-Host "Enabling secret scanning for $($Repo.name)"
                Invoke-GitHubRestMethod -Method PATCH -Uri $Uri -Body $EnableSecretScanningBodyParamsJson
            }
        }
    }
}

