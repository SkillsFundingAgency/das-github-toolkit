<#
.SYNOPSIS
Sets a webhook on a GitHub repo triggered by a repository_vulnerability_alert

.DESCRIPTION
Sets a webhook on a GitHub repo triggered by a repository_vulnerability_alert

.PARAMETER GithubUsername
GitHub username - possibly deprecated authentication method

.PARAMETER GithubPATToken
GitHub PAT token - possibly deprecated authentication method

.PARAMETER OrgName
The name of a GitHub organisation

.PARAMETER RepoSearchString
Pattern used to string match repo name

.PARAMETER WebhookUrl
The webhook to add to the repo

.EXAMPLE
.\Set-GitHubVulnerabilityWebhook -GithubUsername MyGitHubUser -GithubPATToken <not-a-real-pat-token> -OrgName MyGitHubOrg -RepoSearchString MyGitHubRepo -WebhookUrl https://example.com/webhook
#>
param(
    [string]$GithubUsername,
    [string]$GithubPATToken,
    [string]$OrgName,
    [string]$RepoSearchString,
    [string]$WebhookUrl
)


$Base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $GithubUsername, $GithubPATToken)))
$Repos = . "$PSScriptRoot/Get-GithubOrgPublicRepos.ps1" -OrgName $OrgName -Base64AuthInfo $Base64AuthInfo

$WebhookRepos = $Repos | Where-Object { $_.name -like "$RepoSearchString*" -and !$_.archived }

$WebhookInfo = @{
    config = @{
        url          = $WebhookUrl
        content_type = "json"
    }
    events = @("repository_vulnerability_alert")

}
$BaseUrl = "https://api.github.com"

foreach ($Repo in $WebhookRepos) {
    $Webhooks = Invoke-RestMethod -Uri "$BaseUrl/repos/$OrgName/$($Repo.Name)/hooks" -Headers @{ Authorization = "Basic $Base64AuthInfo" }
    $ExistingWebhook = $Webhooks | Where-Object { $_.config.url -eq $WebhookInfo.config.url -and $_.events -eq $WebhookInfo.events }
    if (!$ExistingWebhook) {
        Write-Host "Creating webhook on $($Repo.Name)"
        $null = Invoke-WebRequest -Uri "$BaseUrl/repos/$OrgName/$($Repo.Name)/hooks" -Method Post -Headers @{ Authorization = "Basic $Base64AuthInfo" } -Body ($WebhookInfo | ConvertTo-Json)
    }
}
